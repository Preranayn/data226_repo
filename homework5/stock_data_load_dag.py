# -*- coding: utf-8 -*-
"""Copy of homework4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eNcmjl94VsRicwFTnfAhmLSnvxEjfSYq
"""

from airflow import DAG
from airflow.models import Variable
from airflow.decorators import task
from airflow.providers.snowflake.hooks.snowflake import SnowflakeHook

from datetime import timedelta
from datetime import datetime
import requests
import json

# Read the secrets

#from google.colab import userdata
#data_api_key = userdata.get("APIkey")
#snowflake_user = userdata.get("snowflake_user")
#snowflake_password = userdata.get("snowflake_pass")
#snowflake_account = userdata.get("snowflake_account")

def return_snowflake_conn():

    # Initialize the SnowflakeHook
    hook = SnowflakeHook(snowflake_conn_id='snowflake_conn')

    # Execute the query and fetch results
    conn = hook.get_conn()
    return conn.cursor()

# read the data from API and load data into snowflake table

import json

@task
def read(alpha_vantage_apikey):
  symbol = "WMT"
  url=f"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol={symbol}&apikey={alpha_vantage_apikey}"
  r = requests.get(url)
  data = r.json()
  return(data)

@task
def transform(data):
  transformed_data = []
  for stock_info_date in data['Time Series (Daily)']:
    stock_info = data['Time Series (Daily)'][stock_info_date]
    stock_info['date'] = stock_info_date
    transformed_data.append(stock_info)
  return(transformed_data)

@task
def create_table(snowflake_connection,table_name):
  snowflake_connection.execute(f"""
  create or replace table {table_name} (
                             date date  primary key,
                             open float,
                             high float,
                             low float,
                             close float,
                             volume int,
                             symbol varchar)
  """)

@task
# Load the data read from API
def load(snowflake_connection,load_data,table_name):
  for each_record in load_data:
    each_insert_query = f"""
    insert into {table_name}(date,open,high,low,close,volume,symbol) values
    (to_date('{each_record['date']}','YYYY-MM-DD'),
      {each_record['1. open']},
      {each_record['2. high']},
      {each_record['3. low']},
      {each_record['4. close']},
      {each_record['5. volume']},
      'WMT'
    )
    """
    snowflake_connection.execute(each_insert_query)

@task
def load_v2(snowflake_connection,load_data,table_name):
  try:
    snowflake_connection.execute("Begin")
    create_table(table_name)
    load(snowflake_connection,table_name,load_data)
    snowflake_connection.execute("Commit")
  except Exception as e:
    snowflake_connection.execute("Rollback")
    raise e


with DAG(
    dag_id = 'stock_data_load',
    start_date = datetime(2024,10,10),
    catchup=False,
    tags=['ETL'],
    schedule = '15 19 * * *'
) as dag:
    target_table = "dev.raw_data.wmt_stocks_data"
    alpha_vantage_apikey = Variable.get("alpha_vantage_api_key")
    cur = return_snowflake_conn()

    data = read(alpha_vantage_apikey)
    transformed_data = transform(data)
    create_table(cur, target_table)
    load(cur, transformed_data, target_table)